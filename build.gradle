/*
 * MIT License
 *
 * Copyright (c) 2020-present Cloudogu GmbH and Contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

plugins {
  id 'java-platform'
  id 'maven-publish'
  id "org.sonarqube" version "3.0"
  id "org.scm-manager.changelog" version "0.1.5"
}

changelog {
  versionUrlPattern = "https://scm-manager.org/download/{0}"
}

subprojects { s ->
  repositories {
    mavenLocal()
    maven {
      url 'https://packages.scm-manager.org/repository/public/'
    }
  }
}

dependencies {
  constraints {
    // lombok
    api 'org.projectlombok:lombok:1.18.10'

    // servlet api
    api 'javax.servlet:javax.servlet-api:3.1.0'

    // logging
    api "org.slf4j:slf4j-api:1.7.30"
    api "org.slf4j:jcl-over-slf4j:1.7.30"
    api 'ch.qos.logback:logback-classic:1.2.3'

    // injection
    api "com.google.inject:guice:5.0.1"
    api "com.google.inject.extensions:guice-servlet:5.0.1"
    api "com.google.inject.extensions:guice-throwingproviders:5.0.1"
    api "com.google.inject.extensions:guice-assistedinject:5.0.1"

    // rest api
    api 'javax.ws.rs:javax.ws.rs-api:2.1.1'
    api "org.jboss.resteasy:resteasy-core:4.6.0.Final"
    api "org.jboss.resteasy:resteasy-jaxb-provider:4.6.0.Final"
    api "org.jboss.resteasy:resteasy-jackson2-provider:4.6.0.Final"
    api "org.jboss.resteasy:resteasy-multipart-provider:4.6.0.Final"
    api "org.jboss.resteasy:resteasy-guice:4.6.0.Final"
    api "org.jboss.resteasy:resteasy-servlet-initializer:4.6.0.Final"
    api "org.jboss.resteasy:resteasy-validator-provider:4.6.0.Final"

    // json
    api "com.fasterxml.jackson.core:jackson-core:2.11.3"
    api "com.fasterxml.jackson.core:jackson-annotations:2.11.3"
    api "com.fasterxml.jackson.core:jackson-databind:2.11.3"
    api "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:2.11.3"
    api "com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:2.11.3"
    api "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.11.3"
    api "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.11.3"
    api "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.3"

    // hypermedia
    api 'de.otto.edison:edison-hal:2.1.0'

    // openapi
    api 'io.swagger.core.v3:swagger-jaxrs2:2.1.6'

    // dto mapping
    api "org.mapstruct:mapstruct-jdk8:1.3.1.Final"
    api "org.mapstruct:mapstruct-processor:1.3.1.Final"

    // events
    api "com.cloudogu.legman:core:2.0.0"
    api "com.cloudogu.legman.support:shiro:2.0.0"
    api "com.cloudogu.legman.support:micrometer:2.0.0"

    // xml binding
    api "jakarta.xml.bind:jakarta.xml.bind-api:2.3.3"
    api "org.glassfish.jaxb:jaxb-runtime:2.3.3"

    // validation
    api 'org.hibernate.validator:hibernate-validator:6.1.6.Final'
    api 'javax.el:javax.el-api:3.0.0'
    api 'org.glassfish:javax.el:3.0.1-b11'

    // utils
    api 'com.google.guava:guava:30.1-jre'
    api 'commons-lang:commons-lang:2.6'
    api 'org.apache.commons:commons-compress:1.20'

    // security
    api "org.apache.shiro:shiro-core:1.7.1"
    api "org.apache.shiro:shiro-web:1.7.1"
    api "org.apache.shiro:shiro-guice:1.7.1"

    api "com.github.sdorra:ssp-lib:1.3.0"
    api "com.github.sdorra:ssp-processor:1.3.0"

    api 'com.github.sdorra:shiro-unit:1.0.2'
    api 'com.github.sdorra:junit-shiro-extension:1.0.1'

    // jwt
    api "io.jsonwebtoken:jjwt-api:0.11.2"
    api "io.jsonwebtoken:jjwt-impl:0.11.2"
    api "io.jsonwebtoken:jjwt-jackson:0.11.2"

    // gpg
    api "org.bouncycastle:bcpg-jdk15on:1.67"
    api "org.bouncycastle:bcprov-jdk15on:1.67"
    api "org.bouncycastle:bcpkix-jdk15on:1.67"

    // service registration
    api 'org.kohsuke.metainf-services:metainf-services:1.8'

    // cron expression
    api 'com.cronutils:cron-utils:9.1.3'

    // templates
    api 'com.github.spullara.mustache.java:compiler:0.9.7'

    // static resources
    api 'com.github.sdorra:web-resources:1.1.1'

    // content type detection
    api 'com.github.sdorra:spotter-core:3.0.1'
    api 'org.apache.tika:tika-core:1.25'

    // restart on unix
    api 'org.kohsuke:akuma:1.10'

    // native access
    api 'net.java.dev.jna:jna:5.6.0'

    // daemonize scm-manager on unix systems
    api 'commons-daemon:commons-daemon:1.2.3'
    api 'commons-daemon:commons-daemon-native:1.1.0@tar.gz'

    // yaml
    api 'org.yaml:snakeyaml:1.21'

    // jetty
    api "org.eclipse.jetty:jetty-server:9.4.35.v20201120"
    api "org.eclipse.jetty:jetty-webapp:9.4.35.v20201120"
    api "org.eclipse.jetty:jetty-jmx:9.4.35.v20201120"
    api "org.eclipse.jetty:jetty-client:9.4.35.v20201120"

    // search
    api "org.apache.lucene:lucene-core:8.9.0"
    api "org.apache.lucene:lucene-queryparser:8.9.0"
    api "org.apache.lucene:lucene-highlighter:8.9.0"
    api "org.apache.lucene:lucene-analyzers-common:8.9.0"

    // tests
    api "org.junit.jupiter:junit-jupiter-api:5.7.0"
    api "org.junit.jupiter:junit-jupiter-params:5.7.0"
    api "org.junit.jupiter:junit-jupiter-engine:5.7.0"

    // junit 4 support
    api "org.junit.vintage:junit-vintage-engine:5.7.0"
    api 'junit:junit:4.13.1'

    // assertions
    api "org.hamcrest:hamcrest-core:2.1"
    api "org.hamcrest:hamcrest-library:2.1"
    api 'org.assertj:assertj-core:3.18.1'

    // mocking
    api "org.mockito:mockito-core:3.6.28"
    api "org.mockito:mockito-junit-jupiter:3.6.28"

    // testing async code
    api 'org.awaitility:awaitility:4.0.2'

    // rest api client for testing
    api "com.sun.jersey:jersey-client:1.19.4"
    api "com.sun.jersey.contribs:jersey-apache-client:1.19.4"

    // metrics
    api "io.micrometer:micrometer-core:1.6.4"
    api "io.github.mweirauch:micrometer-jvm-extras:0.2.2"
  }
}

import org.gradle.util.VersionNumber

// set build props
project.ext {
  timestamp = new Date().format('yyyyMMddHHmmSS')
  revision = "git rev-parse --short HEAD".execute().text.trim()
  if (project.version.contains('-SNAPSHOT')) {
    isSnapshot = true
    expandedVersion = project.version.replace('SNAPSHOT', timestamp)
    expandedVersionWithDot = project.version.replace('-SNAPSHOT', ".${timestamp}")
    dockerRepository = 'docker.io/cloudogu/scm-manager'
    String snapshotVersion = revision
    def buildNumber = System.getenv('BUILD_NUMBER')
    if (buildNumber != null) {
      snapshotVersion += "-${buildNumber}"
    }
    dockerTag = project.version.replace('SNAPSHOT', snapshotVersion)
  } else {
    isSnapshot = false
    expandedVersion = project.version
    expandedVersionWithDot = project.version
    dockerRepository = 'docker.io/scmmanager/scm-manager'
    dockerTag = project.version
  }

  VersionNumber v = VersionNumber.parse(project.version)
  nextSnapshotVersion = "${v.major}.${v.minor}.${v.micro + 1}-SNAPSHOT"

  isCI = isRunningOnCiServer()
  os = os()
  arch = arch()

  // map signing environment variables
  // this is required because of environment variables should not have a dot in the name
  // but the gradle signing props are using dots
  // also we use the set method, because setting props with dots works neither
  if (isEnvAvailable("GPG_KEY_RING")) {
    set('signing.secretKeyRingFile', System.getenv("GPG_KEY_RING"))
  }
  if (isEnvAvailable("GPG_KEY_ID")) {
    set('signing.keyId', System.getenv("GPG_KEY_ID"))
  }
  if (isEnvAvailable("GPG_KEY_PASSWORD")) {
    set('signing.password', System.getenv("GPG_KEY_PASSWORD"))
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId project.name
      from components.javaPlatform
    }
  }
  repositories {
    maven {
      String releasesRepoUrl = "https://packages.scm-manager.org/repository/releases/"
      String snapshotsRepoUrl = "https://packages.scm-manager.org/repository/snapshots/"
      url = isSnapshot ? snapshotsRepoUrl : releasesRepoUrl
      if (project.hasProperty("packagesScmManagerUsername") && project.hasProperty("packagesScmManagerPassword")) {
        credentials {
          username project.property("packagesScmManagerUsername")
          password project.property("packagesScmManagerPassword")
        }
      }
    }
  }
}

// determine if we run on ci

def isRunningOnCiServer() {
  return isEnvAvailable("JENKINS_URL") && isEnvAvailable("BUILD_ID")
}

def isEnvAvailable(String key) {
  String value = System.getenv(key)
  return value != null && !value.trim().isEmpty()
}

def os() {
  return System.getProperty("os.name").toLowerCase(Locale.ENGLISH)
}

def arch() {
  def arch = System.getProperty("os.arch")
  if ("amd64".equals(arch)) {
    return "x64"
  }
  return arch
}

// release related tasks

task setVersion {
  doLast {
    if (!project.hasProperty('newVersion')) {
      throw new GradleException('usage setVersion -PnewVersion=x.y.z')
    }

    String version = project.property('newVersion')
    setNewVersion(version)
  }
}

task setVersionToNextSnapshot {
  doLast {
    setNewVersion(nextSnapshotVersion)
  }
}

task printVersion {
  doLast {
    println project.version
  }
}

def setNewVersion(String newVersion) {
  File propertiesFile = new File(project.rootDir, 'gradle.properties')

  if (project.version == newVersion) {
    println "project uses already version ${newVersion}"
    return
  }

  def lines = propertiesFile.readLines('UTF-8')
  def newLines = lines.collect{ line ->
    if (line.trim().startsWith('version')) {
      return "version = ${newVersion}"
    }
    return line
  }

  println "set version from ${project.version} to ${newVersion}"
  propertiesFile.withWriter('UTF-8') {writer ->
    newLines.forEach { line ->
      writer.writeLine(line)
    }
  }
}
