/*
 * MIT License
 *
 * Copyright (c) 2020-present Cloudogu GmbH and Contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

plugins {
  id 'war'
  id 'org.scm-manager.java'
  id 'org.scm-manager.run'
  id 'org.scm-manager.core-plugins'
  id 'io.swagger.core.v3.swagger-gradle-plugin' version '2.1.6'
}

configurations {
  assets
  webapp {
    canBeConsumed = true
    canBeResolved = false
  }
}

dependencies {
  providedCompile platform(rootProject)

  corePlugin project(path: ':scm-plugins:scm-git-plugin', configuration: 'smp')
  corePlugin project(path: ':scm-plugins:scm-hg-plugin', configuration: 'smp')
  corePlugin project(path: ':scm-plugins:scm-svn-plugin', configuration: 'smp')
  corePlugin project(path: ':scm-plugins:scm-legacy-plugin', configuration: 'smp')
  assets project(path: ':scm-ui', configuration: 'assets')

  implementation project(':scm-core')
  implementation project(':scm-dao-xml')
  testImplementation project(':scm-test')
  annotationProcessor project(':scm-annotation-processor')

  // servlet api
  providedCompile "javax.servlet:javax.servlet-api"
  testImplementation "javax.servlet:javax.servlet-api"

  // security
  implementation "org.apache.shiro:shiro-web"
  implementation "org.apache.shiro:shiro-guice"

  // jwt
  implementation "io.jsonwebtoken:jjwt-api"
  implementation "io.jsonwebtoken:jjwt-impl"
  implementation "io.jsonwebtoken:jjwt-jackson"

  // gpg
  implementation "org.bouncycastle:bcpg-jdk15on"
  implementation "org.bouncycastle:bcprov-jdk15on"
  implementation "org.bouncycastle:bcpkix-jdk15on"

  // json
  implementation "com.fasterxml.jackson.core:jackson-annotations"
  implementation "com.fasterxml.jackson.jaxrs:jackson-jaxrs-base"
  implementation "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider"
  implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8"
  implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

  // rest api
  implementation "org.jboss.resteasy:resteasy-jaxb-provider"
  implementation "org.jboss.resteasy:resteasy-jackson2-provider"
  implementation "org.jboss.resteasy:resteasy-multipart-provider"
  implementation "org.jboss.resteasy:resteasy-guice"
  implementation "org.jboss.resteasy:resteasy-servlet-initializer"
  implementation "org.jboss.resteasy:resteasy-validator-provider"

  // openapi
  compileOnly "io.swagger.core.v3:swagger-jaxrs2"

  // logging
  implementation "ch.qos.logback:logback-classic"

  // cron expression
  implementation "com.cronutils:cron-utils"

  // templates
  implementation "com.github.spullara.mustache.java:compiler"

  // static resources
  implementation "com.github.sdorra:web-resources"

  // content type detection
  implementation "com.github.sdorra:spotter-core"
  implementation "org.apache.tika:tika-core"

  // restart on unix
  implementation "org.kohsuke:akuma"

  // native access
  implementation "net.java.dev.jna:jna"

  // util
  implementation"org.apache.commons:commons-compress"

  // events
  implementation "com.cloudogu.legman.support:shiro"
  implementation "com.cloudogu.legman.support:micrometer"

  // metrics
  implementation "io.github.mweirauch:micrometer-jvm-extras"

  implementation "org.apache.lucene:lucene-core"
  implementation "org.apache.lucene:lucene-queryparser"
  implementation "org.apache.lucene:lucene-highlighter"
  implementation "org.apache.lucene:lucene-analyzers-common"

  // lombok
  compileOnly"org.projectlombok:lombok"
  testCompileOnly"org.projectlombok:lombok"
  annotationProcessor"org.projectlombok:lombok"
  testAnnotationProcessor"org.projectlombok:lombok"

  // dto mapping
  annotationProcessor "org.mapstruct:mapstruct-processor"

  // testing async code
  testImplementation "org.awaitility:awaitility"

  // shiro unit
  testImplementation"com.github.sdorra:shiro-unit"
}

war {
  from 'build/war'
  from project.configurations.assets
  into('WEB-INF/classes/META-INF/scm') {
    from('build/openapi')
  }
  dependsOn 'copy-core-plugins', 'resolve'
}

artifacts {
  webapp(war)
}

// war without assets for development and livereload
task 'dev-war' (type: War) {
  archiveName 'scm-webapp-dev.war'
  from 'build/war'
  into('WEB-INF/classes/META-INF/scm') {
    from('build/openapi')
  }
  dependsOn 'copy-core-plugins', 'resolve'
}

scmServer {
  liveReload = true
  openBrowser = true
  warFile = file('build/libs/scm-webapp-dev.war')
  loggingConfiguration = file('src/main/conf/logback.serve.xml')
}

run {
  dependsOn 'dev-war'
}

resolve {
  outputFileName = 'openapi'
  outputFormat = 'JSONANDYAML'
  prettyPrint = 'TRUE'
  classpath = sourceSets.main.runtimeClasspath
  resourcePackages = ['sonia.scm.api.v2.resources']
  outputDir = file('build/openapi')
  openApiFile = file('build/tmp/openapi.yml')
}

task prepareOpenAPI(type: Copy) {
  from 'src/main/doc/openapi.yml'
  into 'build/tmp'
  expand(version: project.version)
}

tasks.getByName("resolve").configure {
  dependsOn 'prepareOpenAPI'
}

/**
WTF???
<!-- fix javadoc -->

<dependency>
  <groupId>javax.transaction</groupId>
  <artifactId>jta</artifactId>
  <version>1.1</version>
  <scope>provided</scope>
</dependency>

<!--
fix java.lang.NoClassDefFoundError org/w3c/dom/ElementTraversal
-->

<dependency>
  <groupId>xml-apis</groupId>
  <artifactId>xml-apis</artifactId>
  <version>1.4.01</version>
</dependency>
**/
